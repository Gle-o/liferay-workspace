/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package fr.smile.training.faq.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import fr.smile.training.faq.model.Faq;
import fr.smile.training.faq.model.FaqModel;
import fr.smile.training.faq.model.FaqSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Faq service. Represents a row in the &quot;Faq_Faq&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>FaqModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FaqImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FaqImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FaqModelImpl extends BaseModelImpl<Faq> implements FaqModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a faq model instance should use the <code>Faq</code> interface instead.
	 */
	public static final String TABLE_NAME = "Faq_Faq";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"faqId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"question", Types.VARCHAR},
		{"answer", Types.VARCHAR}, {"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("faqId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("question", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Faq_Faq (uuid_ VARCHAR(75) null,faqId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title STRING null,question STRING null,answer STRING null,description VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Faq_Faq";

	public static final String ORDER_BY_JPQL = " ORDER BY faq.title ASC";

	public static final String ORDER_BY_SQL = " ORDER BY Faq_Faq.title ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long STATUS_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long TITLE_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Faq toModel(FaqSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Faq model = new FaqImpl();

		model.setUuid(soapModel.getUuid());
		model.setFaqId(soapModel.getFaqId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setTitle(soapModel.getTitle());
		model.setQuestion(soapModel.getQuestion());
		model.setAnswer(soapModel.getAnswer());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Faq> toModels(FaqSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Faq> models = new ArrayList<Faq>(soapModels.length);

		for (FaqSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public FaqModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _faqId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFaqId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _faqId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Faq.class;
	}

	@Override
	public String getModelClassName() {
		return Faq.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Faq, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Faq, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Faq, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Faq)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Faq, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Faq, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Faq)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Faq, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Faq, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Faq>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Faq.class.getClassLoader(), Faq.class, ModelWrapper.class);

		try {
			Constructor<Faq> constructor =
				(Constructor<Faq>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Faq, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Faq, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Faq, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Faq, Object>>();
		Map<String, BiConsumer<Faq, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Faq, ?>>();

		attributeGetterFunctions.put("uuid", Faq::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Faq, String>)Faq::setUuid);
		attributeGetterFunctions.put("faqId", Faq::getFaqId);
		attributeSetterBiConsumers.put(
			"faqId", (BiConsumer<Faq, Long>)Faq::setFaqId);
		attributeGetterFunctions.put("groupId", Faq::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Faq, Long>)Faq::setGroupId);
		attributeGetterFunctions.put("companyId", Faq::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Faq, Long>)Faq::setCompanyId);
		attributeGetterFunctions.put("userId", Faq::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Faq, Long>)Faq::setUserId);
		attributeGetterFunctions.put("userName", Faq::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Faq, String>)Faq::setUserName);
		attributeGetterFunctions.put("createDate", Faq::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Faq, Date>)Faq::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Faq::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Faq, Date>)Faq::setModifiedDate);
		attributeGetterFunctions.put("status", Faq::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Faq, Integer>)Faq::setStatus);
		attributeGetterFunctions.put("statusByUserId", Faq::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId", (BiConsumer<Faq, Long>)Faq::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Faq::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Faq, String>)Faq::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Faq::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Faq, Date>)Faq::setStatusDate);
		attributeGetterFunctions.put("title", Faq::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Faq, String>)Faq::setTitle);
		attributeGetterFunctions.put("question", Faq::getQuestion);
		attributeSetterBiConsumers.put(
			"question", (BiConsumer<Faq, String>)Faq::setQuestion);
		attributeGetterFunctions.put("answer", Faq::getAnswer);
		attributeSetterBiConsumers.put(
			"answer", (BiConsumer<Faq, String>)Faq::setAnswer);
		attributeGetterFunctions.put("description", Faq::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Faq, String>)Faq::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getFaqId() {
		return _faqId;
	}

	@Override
	public void setFaqId(long faqId) {
		_faqId = faqId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public String getTitle(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId);
	}

	@Override
	public String getTitle(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTitle(languageId, useDefault);
	}

	@Override
	public String getTitle(String languageId) {
		return LocalizationUtil.getLocalization(getTitle(), languageId);
	}

	@Override
	public String getTitle(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTitle(), languageId, useDefault);
	}

	@Override
	public String getTitleCurrentLanguageId() {
		return _titleCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTitleCurrentValue() {
		Locale locale = getLocale(_titleCurrentLanguageId);

		return getTitle(locale);
	}

	@Override
	public Map<Locale, String> getTitleMap() {
		return LocalizationUtil.getLocalizationMap(getTitle());
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask = -1L;

		_title = title;
	}

	@Override
	public void setTitle(String title, Locale locale) {
		setTitle(title, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitle(String title, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(title)) {
			setTitle(
				LocalizationUtil.updateLocalization(
					getTitle(), "Title", title, languageId, defaultLanguageId));
		}
		else {
			setTitle(
				LocalizationUtil.removeLocalization(
					getTitle(), "Title", languageId));
		}
	}

	@Override
	public void setTitleCurrentLanguageId(String languageId) {
		_titleCurrentLanguageId = languageId;
	}

	@Override
	public void setTitleMap(Map<Locale, String> titleMap) {
		setTitleMap(titleMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTitleMap(
		Map<Locale, String> titleMap, Locale defaultLocale) {

		if (titleMap == null) {
			return;
		}

		setTitle(
			LocalizationUtil.updateLocalization(
				titleMap, getTitle(), "Title",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getQuestion() {
		if (_question == null) {
			return "";
		}
		else {
			return _question;
		}
	}

	@Override
	public String getQuestion(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion(languageId);
	}

	@Override
	public String getQuestion(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getQuestion(languageId, useDefault);
	}

	@Override
	public String getQuestion(String languageId) {
		return LocalizationUtil.getLocalization(getQuestion(), languageId);
	}

	@Override
	public String getQuestion(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getQuestion(), languageId, useDefault);
	}

	@Override
	public String getQuestionCurrentLanguageId() {
		return _questionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getQuestionCurrentValue() {
		Locale locale = getLocale(_questionCurrentLanguageId);

		return getQuestion(locale);
	}

	@Override
	public Map<Locale, String> getQuestionMap() {
		return LocalizationUtil.getLocalizationMap(getQuestion());
	}

	@Override
	public void setQuestion(String question) {
		_question = question;
	}

	@Override
	public void setQuestion(String question, Locale locale) {
		setQuestion(question, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setQuestion(
		String question, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(question)) {
			setQuestion(
				LocalizationUtil.updateLocalization(
					getQuestion(), "Question", question, languageId,
					defaultLanguageId));
		}
		else {
			setQuestion(
				LocalizationUtil.removeLocalization(
					getQuestion(), "Question", languageId));
		}
	}

	@Override
	public void setQuestionCurrentLanguageId(String languageId) {
		_questionCurrentLanguageId = languageId;
	}

	@Override
	public void setQuestionMap(Map<Locale, String> questionMap) {
		setQuestionMap(questionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setQuestionMap(
		Map<Locale, String> questionMap, Locale defaultLocale) {

		if (questionMap == null) {
			return;
		}

		setQuestion(
			LocalizationUtil.updateLocalization(
				questionMap, getQuestion(), "Question",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getAnswer() {
		if (_answer == null) {
			return "";
		}
		else {
			return _answer;
		}
	}

	@Override
	public String getAnswer(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAnswer(languageId);
	}

	@Override
	public String getAnswer(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAnswer(languageId, useDefault);
	}

	@Override
	public String getAnswer(String languageId) {
		return LocalizationUtil.getLocalization(getAnswer(), languageId);
	}

	@Override
	public String getAnswer(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getAnswer(), languageId, useDefault);
	}

	@Override
	public String getAnswerCurrentLanguageId() {
		return _answerCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAnswerCurrentValue() {
		Locale locale = getLocale(_answerCurrentLanguageId);

		return getAnswer(locale);
	}

	@Override
	public Map<Locale, String> getAnswerMap() {
		return LocalizationUtil.getLocalizationMap(getAnswer());
	}

	@Override
	public void setAnswer(String answer) {
		_answer = answer;
	}

	@Override
	public void setAnswer(String answer, Locale locale) {
		setAnswer(answer, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAnswer(String answer, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(answer)) {
			setAnswer(
				LocalizationUtil.updateLocalization(
					getAnswer(), "Answer", answer, languageId,
					defaultLanguageId));
		}
		else {
			setAnswer(
				LocalizationUtil.removeLocalization(
					getAnswer(), "Answer", languageId));
		}
	}

	@Override
	public void setAnswerCurrentLanguageId(String languageId) {
		_answerCurrentLanguageId = languageId;
	}

	@Override
	public void setAnswerMap(Map<Locale, String> answerMap) {
		setAnswerMap(answerMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setAnswerMap(
		Map<Locale, String> answerMap, Locale defaultLocale) {

		if (answerMap == null) {
			return;
		}

		setAnswer(
			LocalizationUtil.updateLocalization(
				answerMap, getAnswer(), "Answer",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Faq.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Faq.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> titleMap = getTitleMap();

		for (Map.Entry<Locale, String> entry : titleMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> questionMap = getQuestionMap();

		for (Map.Entry<Locale, String> entry : questionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> answerMap = getAnswerMap();

		for (Map.Entry<Locale, String> entry : answerMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTitle();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			Faq.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String title = getTitle(defaultLocale);

		if (Validator.isNull(title)) {
			setTitle(getTitle(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTitle(getTitle(defaultLocale), defaultLocale, defaultLocale);
		}

		String question = getQuestion(defaultLocale);

		if (Validator.isNull(question)) {
			setQuestion(getQuestion(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setQuestion(
				getQuestion(defaultLocale), defaultLocale, defaultLocale);
		}

		String answer = getAnswer(defaultLocale);

		if (Validator.isNull(answer)) {
			setAnswer(getAnswer(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setAnswer(getAnswer(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Faq toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Faq> escapedModelProxyProviderFunction =
				EscapedModelProxyProviderFunctionHolder.
					_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FaqImpl faqImpl = new FaqImpl();

		faqImpl.setUuid(getUuid());
		faqImpl.setFaqId(getFaqId());
		faqImpl.setGroupId(getGroupId());
		faqImpl.setCompanyId(getCompanyId());
		faqImpl.setUserId(getUserId());
		faqImpl.setUserName(getUserName());
		faqImpl.setCreateDate(getCreateDate());
		faqImpl.setModifiedDate(getModifiedDate());
		faqImpl.setStatus(getStatus());
		faqImpl.setStatusByUserId(getStatusByUserId());
		faqImpl.setStatusByUserName(getStatusByUserName());
		faqImpl.setStatusDate(getStatusDate());
		faqImpl.setTitle(getTitle());
		faqImpl.setQuestion(getQuestion());
		faqImpl.setAnswer(getAnswer());
		faqImpl.setDescription(getDescription());

		faqImpl.resetOriginalValues();

		return faqImpl;
	}

	@Override
	public int compareTo(Faq faq) {
		int value = 0;

		value = getTitle().compareTo(faq.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Faq)) {
			return false;
		}

		Faq faq = (Faq)obj;

		long primaryKey = faq.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		FaqModelImpl faqModelImpl = this;

		faqModelImpl._originalUuid = faqModelImpl._uuid;

		faqModelImpl._originalGroupId = faqModelImpl._groupId;

		faqModelImpl._setOriginalGroupId = false;

		faqModelImpl._originalCompanyId = faqModelImpl._companyId;

		faqModelImpl._setOriginalCompanyId = false;

		faqModelImpl._setModifiedDate = false;

		faqModelImpl._originalStatus = faqModelImpl._status;

		faqModelImpl._setOriginalStatus = false;

		faqModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Faq> toCacheModel() {
		FaqCacheModel faqCacheModel = new FaqCacheModel();

		faqCacheModel.uuid = getUuid();

		String uuid = faqCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			faqCacheModel.uuid = null;
		}

		faqCacheModel.faqId = getFaqId();

		faqCacheModel.groupId = getGroupId();

		faqCacheModel.companyId = getCompanyId();

		faqCacheModel.userId = getUserId();

		faqCacheModel.userName = getUserName();

		String userName = faqCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			faqCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			faqCacheModel.createDate = createDate.getTime();
		}
		else {
			faqCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			faqCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			faqCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		faqCacheModel.status = getStatus();

		faqCacheModel.statusByUserId = getStatusByUserId();

		faqCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = faqCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			faqCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			faqCacheModel.statusDate = statusDate.getTime();
		}
		else {
			faqCacheModel.statusDate = Long.MIN_VALUE;
		}

		faqCacheModel.title = getTitle();

		String title = faqCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			faqCacheModel.title = null;
		}

		faqCacheModel.question = getQuestion();

		String question = faqCacheModel.question;

		if ((question != null) && (question.length() == 0)) {
			faqCacheModel.question = null;
		}

		faqCacheModel.answer = getAnswer();

		String answer = faqCacheModel.answer;

		if ((answer != null) && (answer.length() == 0)) {
			faqCacheModel.answer = null;
		}

		faqCacheModel.description = getDescription();

		String description = faqCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			faqCacheModel.description = null;
		}

		return faqCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Faq, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Faq, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Faq, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Faq)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Faq, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Faq, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Faq, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Faq)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Faq>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _faqId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _title;
	private String _titleCurrentLanguageId;
	private String _question;
	private String _questionCurrentLanguageId;
	private String _answer;
	private String _answerCurrentLanguageId;
	private String _description;
	private long _columnBitmask;
	private Faq _escapedModel;

}